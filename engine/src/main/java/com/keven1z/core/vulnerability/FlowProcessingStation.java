package com.keven1z.core.vulnerability;

import com.keven1z.core.hook.http.request.AbstractRequest;
import com.keven1z.core.hook.http.response.HttpServletResponse;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.model.ApplicationModel;
import com.keven1z.core.pojo.*;
import com.keven1z.core.vulnerability.detectors.*;
import org.apache.log4j.Logger;

import java.util.ArrayList;
import java.util.List;

import static com.keven1z.core.hook.HookThreadLocal.*;

/**
 * @author keven1z
 * @date 2023/10/29
 * hook以及流量处理类
 */
public class FlowProcessingStation {
    private static final List<Detector> detectors = new ArrayList<>();
    private static final Logger logger = Logger.getLogger(FlowProcessingStation.class);

    static {
        detectors.add(new SSRFDetector());
        detectors.add(new SqliDetector());
        detectors.add(new XxeDetector());
        detectors.add(new CmdiDetector());
        detectors.add(new DeserializationDetector());
        detectors.add(new UrlRedirectDetector());
        detectors.add(new XSSDetector());
        detectors.add(new PathTraversalDetector());
        detectors.add(new FileUploadDetector());
        detectors.add(new SpelDetector());
    }

    private FlowProcessingStation() {
    }

    public static FlowProcessingStation getInstance() {
        return Inner.flowProcessingStation;
    }

    private static class Inner {
        private static final FlowProcessingStation flowProcessingStation = new FlowProcessingStation();
    }

    public void doProcess() {
        if (SINGLE_FINDING_THREADLOCAL.get().isEmpty() && TAINT_GRAPH_THREAD_LOCAL.get().getSinkNodes().isEmpty()) {
            if (LogTool.isDebugEnabled()) {
                logger.warn("Not found any sink node,url:" + REQUEST_THREAD_LOCAL.get().getRequest().getRequestURL());
            }
            return;
        }
        List<FindingData> findingDataList = new ArrayList<>(SINGLE_FINDING_THREADLOCAL.get());
        FindingReportBo findingReportBo = new FindingReportBo(ApplicationModel.getAgentId());
        findingReportBo.setRequestData(buildRequest());
        findingReportBo.setResponseData(buildResponse());
        findingReportBo.setSingleFindingDataList(findingDataList);
        findingReportBo.setTaintGraph(TAINT_GRAPH_THREAD_LOCAL.get());
        boolean isOffer = FINDING_REPORT_QUEUE.offer(findingReportBo);
        if (!isOffer) {
            TAINT_GRAPH_THREAD_LOCAL.get().clear();
            SINGLE_FINDING_THREADLOCAL.get().clear();
        }
    }

    public Detector getDetector(String vulnType) {
        for (Detector detector : detectors) {
            if (detector.supportType(vulnType)) {
                return detector;
            }
        }
        return null;
    }

    /**
     * 构建http请求
     */
    private HttpRequestData buildRequest() {
        AbstractRequest request = REQUEST_THREAD_LOCAL.get().getRequest();
        HttpRequestData httpRequestData = new HttpRequestData(request.getRequestURLString(), request.getMethod(), request.getHeaders());
        httpRequestData.setRequestBody(request.getStringBody());
        httpRequestData.setUri(request.getRequestURI());
        httpRequestData.setProtocol(request.getProtocol());
        return httpRequestData;
    }

    private HttpResponseData buildResponse() {
        HttpServletResponse response = REQUEST_THREAD_LOCAL.get().getResponse();
        HttpResponseData httpResponseData = new HttpResponseData(response.getHeaders());
        httpResponseData.setStatusCode(response.getStatusCode());
        return httpResponseData;
    }
}
