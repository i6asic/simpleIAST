package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnEnum;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.pojo.HttpRequestData;
import com.keven1z.core.pojo.HttpResponseData;
import com.keven1z.core.utils.StringUtils;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.Detector;
import org.apache.log4j.Logger;

import java.util.LinkedList;
import java.util.List;

/**
 * URl跳转漏洞检测规则
 */
public class UrlRedirectDetector implements Detector {
    private static final Logger logger = Logger.getLogger(UrlRedirectDetector.class);

    @Override
    public boolean detect(LinkedList<TaintData> flowLinks, HttpRequestData requestData, HttpResponseData responseData) {
        List<Object> sourceList = TaintUtils.calculateSourceValue(flowLinks);
        if (sourceList.isEmpty()) {
            return false;
        }
        boolean isSatisfied = false;
        for (Object source : sourceList) {
            if (source instanceof String && StringUtils.isURL(source.toString())) {
                isSatisfied = true;
            }
        }
        if (!isSatisfied){
            if (LogTool.isDebugEnabled()) {
                logger.warn("[Url Redirect] Source is not URL.");
            }
        }

        String taintValue = flowLinks.getLast().getFromValue();
        return StringUtils.isURL(taintValue);
    }

    @Override
    public boolean supportType(String type) {
        return VulnEnum.URL_REDIRECT.getName().equals(type);
    }

    @Override
    public int getLevel() {
        return VulnEnum.URL_REDIRECT.getLevel();
    }

}
