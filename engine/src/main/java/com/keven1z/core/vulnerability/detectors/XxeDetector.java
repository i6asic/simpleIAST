package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnEnum;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.pojo.HttpRequestData;
import com.keven1z.core.pojo.HttpResponseData;
import com.keven1z.core.utils.ReflectionUtils;
import com.keven1z.core.vulnerability.Detector;
import org.apache.log4j.Logger;

import java.util.HashMap;
import java.util.LinkedList;

import static com.keven1z.core.utils.ReflectionUtils.EMPTY_CLASS;
import static com.keven1z.core.utils.ReflectionUtils.STRING_CLASS;

public class XxeDetector implements Detector {
    private static final String DISALLOW_DOCTYPE_DECL = "http://apache.org/xml/features/disallow-doctype-decl";
    private static final String EXTERNAL_GENERAL_ENTITIES = "http://xml.org/sax/features/external-general-entities";
    private static final String EXTERNAL_PARAMETER_ENTITIES = "http://xml.org/sax/features/external-parameter-entities";
    private static final String LOAD_EXTERNAL_DTD = "http://apache.org/xml/features/nonvalidating/load-external-dtd";

    private static final String SUPPORT_DTD = "javax.xml.stream.supportDTD";
    public static final String IS_SUPPORTING_EXTERNAL_ENTITIES =
            "javax.xml.stream.isSupportingExternalEntities";
    protected final Logger logger = Logger.getLogger(getClass().getName());


    @Override
    public boolean detect(LinkedList<TaintData> flowLinks, HttpRequestData requestData, HttpResponseData responseData) {
        TaintData sinkData = flowLinks.getLast();
        boolean isSetFeature = false;
        try {
            Object thisObject = sinkData.getThisObject();
            String className = sinkData.getClassName();
            if (className.equals("javax/xml/parsers/DocumentBuilder")) {
                Object domParser = ReflectionUtils.getField(thisObject, "domParser");
                isSetFeature = checkDOMParser(domParser);
            } else if (className.equals("org/jdom2/input/SAXBuilder")) {
                isSetFeature = checkSAXBuilder(thisObject);
            } else if ("com/sun/xml/internal/stream/XMLInputFactoryImpl".equals(className)) {
                isSetFeature = checkXMLInputFactory(thisObject);
            } else if (className.contains("SAXParser")) {
                isSetFeature = checkSAXParser(thisObject);
            } else if (className.contains("TransformerFactory")) {
                isSetFeature = checkTransformerFactory(thisObject);
            } else if ("javax/xml/validation/SchemaFactory".equals(className)) {
                isSetFeature = checkSchemaFactory(thisObject);
            } else if (className.contains("Transformer")) {
                isSetFeature = checkTransformer(thisObject);
            } else if ("javax/xml/validation/Validator".equals(className)) {
                isSetFeature = checkValidation(thisObject);
            }
        } catch (NoSuchFieldException | IllegalAccessException e) {
            if (LogTool.isDebugEnabled()) {
                logger.error("The url(" + requestData.getUrl() + ") encountered an exception when detecting feature,className:" + sinkData.getClassName(), e);
            }
            return false;
        }
        if (isSetFeature) {
            if (LogTool.isDebugEnabled()) {
                logger.warn("The url(" + requestData.getUrl() + ") is safe due to setting feature,className:" + sinkData.getClassName());
            }
            return false;
        }
        return true;
    }

    /**
     * 检测XMLInputFactoryImpl是否设置Feature防护
     */
    private boolean checkXMLInputFactory(Object thisObject) {
        boolean isAllowed = (boolean) ReflectionUtils.invokeMethod(thisObject, "getProperty", STRING_CLASS, IS_SUPPORTING_EXTERNAL_ENTITIES);
        isAllowed = isAllowed || (boolean) ReflectionUtils.invokeMethod(thisObject, "getProperty", STRING_CLASS, SUPPORT_DTD);
        return !isAllowed;
    }

    /**
     * 检测DOMParser是否设置Feature防护
     */
    private boolean checkDOMParser(Object domParser) {
        boolean isAllowed = (boolean) ReflectionUtils.invokeMethod(domParser, "getFeature", STRING_CLASS, "http://xml.org/sax/features/external-parameter-entities");
        isAllowed = isAllowed || (boolean) ReflectionUtils.invokeMethod(domParser, "getFeature", STRING_CLASS, "http://apache.org/xml/features/nonvalidating/load-external-dtd");
        return !isAllowed;
    }

    private boolean checkSAXBuilder(Object saxBuilder) throws NoSuchFieldException, IllegalAccessException {
        boolean isSetted = false;
        HashMap<String, Boolean> features = (HashMap<String, Boolean>) ReflectionUtils.getField(saxBuilder, "features");
        if (features.containsKey(DISALLOW_DOCTYPE_DECL) &&
                features.containsKey(EXTERNAL_PARAMETER_ENTITIES) &&
                features.containsKey(LOAD_EXTERNAL_DTD) &&
                features.containsKey(EXTERNAL_GENERAL_ENTITIES)
        ) {
            if (features.get(DISALLOW_DOCTYPE_DECL) &&
                    !features.get(EXTERNAL_PARAMETER_ENTITIES) &&
                    !features.get(LOAD_EXTERNAL_DTD) &&
                    !features.get(EXTERNAL_GENERAL_ENTITIES)
            ) {
                isSetted = true;
            }
        }
        return isSetted;
    }

    /**
     * 检测SAXParser是否设置Feature防护
     *
     * @return true代表设置Feature防护
     */
    private boolean checkSAXParser(Object thisObject) {
        Object parser = ReflectionUtils.invokeMethod(thisObject, "getParser", EMPTY_CLASS);
        Object isSetted = ReflectionUtils.invokeMethod(parser, "getFeature", STRING_CLASS, DISALLOW_DOCTYPE_DECL);
        if (isSetted == null || !(boolean) isSetted) {
            return false;
        }
        isSetted = ReflectionUtils.invokeMethod(parser, "getFeature", STRING_CLASS, LOAD_EXTERNAL_DTD);
        if (isSetted == null || (boolean) isSetted) {
            return false;
        }
        return true;
    }

    public static final String ACCESS_EXTERNAL_DTD = "http://javax.xml.XMLConstants/property/accessExternalDTD";
    public static final String ACCESS_EXTERNAL_STYLESHEET = "http://javax.xml.XMLConstants/property/accessExternalStylesheet";

    private boolean checkTransformerFactory(Object thisObject) {
        Object isSetted = ReflectionUtils.invokeMethod(thisObject, "getAttribute", STRING_CLASS, ACCESS_EXTERNAL_DTD);
        if (isSetted == null || !"".equals(isSetted.toString())) {
            return false;
        }

        isSetted = ReflectionUtils.invokeMethod(thisObject, "getAttribute", STRING_CLASS, ACCESS_EXTERNAL_STYLESHEET);
        if (isSetted == null || !"".equals(isSetted.toString())) {
            return false;
        }
        return true;
    }

    private static final String ACCESS_EXTERNAL_SCHEMA = "http://javax.xml.XMLConstants/property/accessExternalSchema";

    private boolean checkSchemaFactory(Object thisObject) throws NoSuchFieldException, IllegalAccessException {
        Object fSecurityPropertyMgr = ReflectionUtils.getField(thisObject, "fSecurityPropertyMgr");
        Object isSetted = ReflectionUtils.invokeMethod(fSecurityPropertyMgr, "getValue", STRING_CLASS, ACCESS_EXTERNAL_DTD);
        if (isSetted == null || !"".equals(isSetted.toString())) {
            return false;
        }

        isSetted = ReflectionUtils.invokeMethod(fSecurityPropertyMgr, "getValue", STRING_CLASS, ACCESS_EXTERNAL_SCHEMA);
        if (isSetted == null || !"".equals(isSetted.toString())) {
            return false;
        }
        return true;
    }

    private boolean checkTransformer(Object thisObject) throws NoSuchFieldException, IllegalAccessException {
        Object tfactory = ReflectionUtils.getField(thisObject, "_tfactory");
        Object isSetted = ReflectionUtils.invokeMethod(tfactory, "getAttribute", STRING_CLASS, ACCESS_EXTERNAL_DTD);
        if (isSetted == null || !"".equals(isSetted.toString())) {
            return false;
        }
        isSetted = ReflectionUtils.invokeMethod(tfactory, "getAttribute", STRING_CLASS, ACCESS_EXTERNAL_STYLESHEET);
        if (isSetted == null || !"".equals(isSetted.toString())) {
            return false;
        }
        return true;
    }

    private boolean checkValidation(Object thisObject) throws NoSuchFieldException, IllegalAccessException {
        Object fComponentManager = ReflectionUtils.getField(thisObject, "fComponentManager");
        Object fSecurityPropertyMgr = ReflectionUtils.getField(fComponentManager, "fSecurityPropertyMgr");

        Object isSetted = ReflectionUtils.invokeMethod(fSecurityPropertyMgr, "getValue", STRING_CLASS, ACCESS_EXTERNAL_DTD);
        if (isSetted == null || !"".equals(isSetted.toString())) {
            return false;
        }

        isSetted = ReflectionUtils.invokeMethod(fSecurityPropertyMgr, "getValue", STRING_CLASS, ACCESS_EXTERNAL_SCHEMA);
        if (isSetted == null || !"".equals(isSetted.toString())) {
            return false;
        }
        return true;
    }

    @Override
    public boolean supportType(String type) {
        return VulnEnum.XXE.getName().equals(type);
    }

    @Override
    public int getLevel() {
        return VulnEnum.XXE.getLevel();
    }
}
