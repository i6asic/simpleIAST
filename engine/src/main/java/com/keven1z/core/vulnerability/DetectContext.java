package com.keven1z.core.vulnerability;

import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.pojo.HttpRequestData;
import com.keven1z.core.pojo.HttpResponseData;
import java.util.LinkedList;
import java.util.Objects;

/**
 * 漏洞检测上下文对象
 *
 * <p>职责说明：
 * 1. 封装污点检测和常规检测的上下文参数
 * 2. 通过Builder模式保证对象构建的安全性
 * 3. 禁止直接修改字段值
 */
public class DetectContext {
    // ================= 污点检测专用字段 =================
    private final LinkedList<TaintData> flowLinks;
    private final HttpRequestData requestData;
    private final HttpResponseData responseData;

    // ================= 常规检测专用字段 =================
    private final Object returnObject;
    private final Object thisObject;
    private final Object[] parameters;

    // ================= 构造方法（私有化） =================
    private DetectContext(Builder builder) {
        this.flowLinks = builder.flowLinks;
        this.requestData = builder.requestData;
        this.responseData = builder.responseData;
        this.returnObject = builder.returnObject;
        this.thisObject = builder.thisObject;
        this.parameters = builder.parameters != null ?
                builder.parameters.clone() : null; // 防御性拷贝
    }

    // ================= Getter方法（无Setter） =================
    public LinkedList<TaintData> getFlowLinks() {
        return flowLinks != null ? new LinkedList<>(flowLinks) : null; // 返回不可变副本
    }

    public HttpRequestData getRequestData() {
        return requestData;
    }

    public HttpResponseData getResponseData() {
        return responseData;
    }

    public Object getReturnObject() {
        return returnObject;
    }

    public Object getThisObject() {
        return thisObject;
    }

    public Object[] getParameters() {
        return parameters != null ? parameters.clone() : null; // 防御性拷贝
    }

    /**
     * 建造者类
     */
    public static class Builder {
        private LinkedList<TaintData> flowLinks;
        private HttpRequestData requestData;
        private HttpResponseData responseData;
        private Object returnObject;
        private Object thisObject;
        private Object[] parameters;

        public Builder flowLinks(LinkedList<TaintData> flowLinks) {
            this.flowLinks = flowLinks != null ?
                    new LinkedList<>(flowLinks) : null;
            return this;
        }

        public Builder requestData(HttpRequestData requestData) {
            this.requestData = requestData;
            return this;
        }

        public Builder responseData(HttpResponseData responseData) {
            this.responseData = responseData;
            return this;
        }

        public Builder returnObject(Object returnObject) {
            this.returnObject = returnObject;
            return this;
        }

        public Builder thisObject(Object thisObject) {
            this.thisObject = thisObject;
            return this;
        }

        public Builder parameters(Object... parameters) {
            this.parameters = parameters != null ?
                    parameters.clone() : null;
            return this;
        }

        public DetectContext build() {

            if (!hasTaintParams() && !hasNormalParams()) {
                throw new IllegalArgumentException(
                        "Context must contain taint or normal parameters");
            }
            return new DetectContext(this);
        }

        private boolean hasTaintParams() {
            return flowLinks != null || requestData != null || responseData != null;
        }

        private boolean hasNormalParams() {
            return returnObject != null || thisObject != null || parameters != null;
        }
    }

    @Override
    public String toString() {
        return "DetectContext{" +
                "flowLinksSize=" + (flowLinks != null ? flowLinks.size() : 0) +
                ", requestData=" + requestData +
                ", responseData=" + responseData +
                ", returnObjectType=" + (returnObject != null ? returnObject.getClass().getSimpleName() : "null") +
                ", thisObjectType=" + (thisObject != null ? thisObject.getClass().getSimpleName() : "null") +
                ", parametersCount=" + (parameters != null ? parameters.length : 0) +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        DetectContext that = (DetectContext) o;
        return Objects.equals(flowLinks, that.flowLinks) &&
                Objects.equals(requestData, that.requestData) &&
                Objects.equals(responseData, that.responseData) &&
                Objects.equals(returnObject, that.returnObject) &&
                Objects.equals(thisObject, that.thisObject) &&
                Objects.deepEquals(parameters, that.parameters);
    }

    @Override
    public int hashCode() {
        return Objects.hash(flowLinks, requestData, responseData,
                returnObject, thisObject, parameters);
    }
}
