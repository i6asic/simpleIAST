package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnerabilityLevel;
import com.keven1z.core.consts.VulnerabilityType;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.pojo.HttpRequestData;
import com.keven1z.core.pojo.HttpResponseData;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.AbstractDetector;
import com.keven1z.core.vulnerability.DetectContext;
import com.keven1z.core.policy.SanitizerTypeEnum;
import org.apache.log4j.Logger;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class XSSDetector extends AbstractDetector {
    private static final String XSS_CONTENT_TYPE = "text/html";
    private static final Logger logger = Logger.getLogger(XSSDetector.class);
    final int PARSE_SANITIZER_THRESHOLD = 1;
    final int REPLACE_SANITIZER_THRESHOLD = 5;

    public XSSDetector() {
        super(VulnerabilityType.XSS, VulnerabilityLevel.MIDDLE);
    }

    @Override
    public boolean detect(DetectContext context) {
        LinkedList<TaintData> flowLinks = context.getFlowLinks();
        List<TaintData> sourceList = TaintUtils.getSourceList(flowLinks);

        boolean isContainedString = false;
        for (TaintData source : sourceList) {
            if (source.getToObject() instanceof String || source.getToObject() instanceof String[]) {
                isContainedString = true;
                break;
            }
        }
        HttpRequestData requestData = context.getRequestData();
        if (!isContainedString) {
            if (LogTool.isDebugEnabled()) {
                String url = requestData.getUrl();
                logger.warn(String.format("[XSS] Failed to detect,url:%s, reason:Source is not java/lang/String", url));
            }
            return false;
        }
        HttpResponseData responseData = context.getResponseData();

        Map<String, String> responseHeaders = responseData.getHeaders();
        if (responseHeaders == null || responseHeaders.isEmpty()) {
            return false;
        }
        String contentTypeKey = "Content-Type";
        String contentType = responseHeaders.get(contentTypeKey);
        if (contentType == null) {
            contentType = responseHeaders.get(contentTypeKey.toLowerCase());
        }
        if (contentType == null || !contentType.toLowerCase(Locale.CHINA).startsWith(XSS_CONTENT_TYPE)) {
            if (LogTool.isDebugEnabled()) {
                String url = requestData.getUrl();
                logger.warn(String.format("[XSS] Failed to detect,url:%s, reason:Content-type:%s", url, contentType));
            }
            return false;
        }

        if (TaintUtils.containSanitizer(flowLinks, SanitizerTypeEnum.parse, PARSE_SANITIZER_THRESHOLD)) {
            if (LogTool.isDebugEnabled()) {
                String url = requestData.getUrl();
                logger.warn(String.format("[XSS] Failed to detect,url:%s, reason:type cast", url));
            }
            return false;
        }
        if (TaintUtils.containSanitizer(flowLinks, SanitizerTypeEnum.replace, REPLACE_SANITIZER_THRESHOLD)) {
            if (LogTool.isDebugEnabled()) {
                String url = requestData.getUrl();
                logger.warn(String.format("[XSS] Failed to detect,url:%s, reason:multiple replacement operations", url));
            }
            return false;
        }
        return true;
    }
}
