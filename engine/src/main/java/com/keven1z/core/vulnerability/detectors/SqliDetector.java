package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnEnum;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.pojo.HttpRequestData;
import com.keven1z.core.pojo.HttpResponseData;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.Detector;
import com.keven1z.core.policy.SanitizerTypeEnum;
import org.apache.log4j.Logger;

import java.util.LinkedList;
import java.util.List;

public class SqliDetector implements Detector {
    private static final Logger logger = Logger.getLogger(XSSDetector.class);

    /**
     * 检测 SQL 注入
     *
     * @param flowLinks 污染源链表
     * @param requestData HTTP 请求数据
     * @param responseData HTTP 响应数据
     * @return 如果存在 SQL 注入则返回 true，否则返回 false
     */
    @Override
    public boolean detect(LinkedList<TaintData> flowLinks, HttpRequestData requestData, HttpResponseData responseData) {
        if (flowLinks == null || flowLinks.isEmpty()) {
            // 提前返回，避免空指针异常
            return false;
        }

        if (TaintUtils.containSanitizer(flowLinks, SanitizerTypeEnum.parse, 1)) {
            if (LogTool.isDebugEnabled()) {
                logger.debug(String.format("Failed to detect sql injection, url:%s, reason: The source of pollution is forced to parse", requestData.getUrl()));
            }
            return false;
        }

        if (TaintUtils.containSanitizerInContinuousCode(flowLinks, SanitizerTypeEnum.compare, 5)) {
            if (LogTool.isDebugEnabled()) {
                logger.debug(String.format("Failed to detect sql injection, url:%s, reason: The source of pollution is found multiple compare", requestData.getUrl()));
            }
            return false;
        }

        String sql = flowLinks.getLast().getFromValue();
        boolean containsSqlInjection = false;
        // 遍历所有污染源，判断是否包含 SQL 注入关键字
        List<Object> sourceList = TaintUtils.calculateSourceValue(flowLinks);

        if (!sourceList.isEmpty()) {
            for (Object source : sourceList) {
                if (source instanceof String && sql.contains(source.toString())) {
                    containsSqlInjection = true;
                    break; // 找到匹配项后即可跳出循环
                }
            }
        }

        return containsSqlInjection;
    }


    @Override
    public boolean supportType(String type) {
        return VulnEnum.SQL_INJECTION.getName().equals(type);
    }

    @Override
    public int getLevel() {
        return VulnEnum.SQL_INJECTION.getLevel();
    }
}
