package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnerabilityLevel;
import com.keven1z.core.consts.VulnerabilityType;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.AbstractDetector;
import com.keven1z.core.vulnerability.DetectContext;
import com.keven1z.core.consts.SanitizerType;
import org.apache.log4j.Logger;
import java.util.LinkedList;
import java.util.List;

public class SqliDetector extends AbstractDetector {
    private static final Logger logger = Logger.getLogger(SqliDetector.class);

    public SqliDetector() {
        super(VulnerabilityType.SQL_INJECTION, VulnerabilityLevel.HIGH);
    }

    @Override
    public boolean detect(DetectContext context) {
        LinkedList<TaintData> flowLinks = context.getFlowLinks();
        if (flowLinks == null || flowLinks.isEmpty()) {
            // 提前返回，避免空指针异常
            return false;
        }

        if (TaintUtils.containSanitizer(flowLinks, SanitizerType.parse, 1)) {
            if (LogTool.isDebugEnabled()) {
                logger.debug(String.format("Failed to detect sql injection, url:%s, reason: The source of pollution is forced to parse", context.getRequestData().getUrl()));
            }
            return false;
        }

        if (TaintUtils.containSanitizerInContinuousCode(flowLinks, SanitizerType.compare, 5)) {
            if (LogTool.isDebugEnabled()) {
                logger.debug(String.format("Failed to detect sql injection, url:%s, reason: The source of pollution is found multiple compare", context.getRequestData().getUrl()));
            }
            return false;
        }

        String sql = flowLinks.getLast().getFromValue();
        boolean containsSqlInjection = false;
        // 遍历所有污染源，判断是否包含 SQL 注入关键字
        List<Object> sourceList = TaintUtils.calculateSourceValue(flowLinks);

        if (!sourceList.isEmpty()) {
            for (Object source : sourceList) {
                if (source instanceof String && sql.contains(source.toString())) {
                    containsSqlInjection = true;
                    break; // 找到匹配项后即可跳出循环
                }
            }
        }

        return containsSqlInjection;
    }
}
