package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnEnum;
import com.keven1z.core.hook.http.HttpContext;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.Detector;
import com.keven1z.core.policy.SanitizerTypeEnum;
import org.apache.log4j.Logger;

import java.util.LinkedList;

public class SqliDetector implements Detector {
    private static final Logger logger = Logger.getLogger(XSSDetector.class);

    @Override
    public boolean detect(LinkedList<TaintData> flowLinks, HttpContext http) {
        if (TaintUtils.isContainSanitizer(flowLinks, SanitizerTypeEnum.parse, 1)) {
            if (LogTool.isDebugEnabled()) {
                logger.warn(String.format("Failed to detect sql injection,url:%s, reason:The source of pollution is forced to parse ", http.getRequest().getRequestURLString()));
            }
            return false;
        }
        if (TaintUtils.isContainSanitizer(flowLinks, SanitizerTypeEnum.compare, 3)) {
            if (LogTool.isDebugEnabled()) {
                logger.warn(String.format("Failed to detect sql injection,url:%s, reason:The source of pollution is found multiple compare,", http.getRequest().getRequestURLString()));
            }
            return false;
        }
        return true;
    }

    @Override
    public boolean supportType(String type) {
        return VulnEnum.SQL_INJECTION.getName().equals(type);
    }

    @Override
    public int getLevel() {
        return VulnEnum.SQL_INJECTION.getLevel();
    }
}
