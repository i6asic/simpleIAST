package com.keven1z.core.vulnerability.detectors;

import com.keven1z.core.consts.VulnEnum;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.model.graph.TaintData;
import com.keven1z.core.pojo.HttpRequestData;
import com.keven1z.core.pojo.HttpResponseData;
import com.keven1z.core.utils.TaintUtils;
import com.keven1z.core.vulnerability.Detector;
import org.apache.log4j.Logger;

import java.util.LinkedList;
import java.util.List;

import static com.keven1z.core.utils.CommonUtils.isURL;

public class SSRFDetector implements Detector {
    private static final Logger logger = Logger.getLogger(SSRFDetector.class);

    @Override
    public boolean detect(LinkedList<TaintData> flowLinks, HttpRequestData requestData, HttpResponseData responseData) {
        TaintData sinkTaint = flowLinks.getLast();
        List<Object> sourceList = TaintUtils.calculateSourceValue(flowLinks);
        boolean isSatisfied = false;
        if (sourceList.isEmpty()) {
            if (LogTool.isDebugEnabled()) {
                logger.warn("[SSRF] No input parameters were found.");
            }
            return false;
        }
        for (Object source : sourceList) {
            if (source instanceof String && isURL(source.toString())) {
                isSatisfied = true;
            }
        }
        if (!isSatisfied) {
            return false;
        }
        String taintValue = sinkTaint.getFromValue();
        if (taintValue == null) {
            return false;
        }
        isSatisfied = isURL(taintValue);
        if (!isSatisfied) {
            if (LogTool.isDebugEnabled()) {
                logger.warn("[SSRF] Parameter input is not URL");
            }
            return false;
        }
        return true;
    }

    @Override
    public boolean supportType(String type) {
        return VulnEnum.SSRF.getName().equals(type);
    }

    @Override
    public int getLevel() {
        return VulnEnum.SSRF.getLevel();
    }
}
